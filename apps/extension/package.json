{
  "name": "@aident/extension",
  "version": "0.1.0",
  "private": true,
  "exports": {
    "./*": "./src/export-map.generated.ts"
  },
  "watch": {
    "build:app": {
      "patterns": [
        ".env.local",
        ".env.production",
        "package.json",
        "public",
        "src/app",
        "src/common",
        "../../packages/shared/src"
      ],
      "ignore": [
        "**/*.test.ts"
      ],
      "extensions": "ts,tsx,html,scss,json,js,jsx",
      "quiet": false
    },
    "build:manifest": {
      "patterns": [
        "ci/generate-manifest.ts"
      ],
      "extensions": "ts",
      "quiet": false
    }
  },
  "scripts": {
    "build": "npm run package",
    "build:all": "cross-env NEXT_PUBLIC_BUILD_ENV=$NEXT_PUBLIC_BUILD_ENV concurrently -c \"auto\" -n \"app,manifest,service\" npm:build:app npm:build:manifest npm:build:service",
    "build:all:dev": "NEXT_PUBLIC_BUILD_ENV=development npm run build:all",
    "build:all:prod": "NEXT_PUBLIC_BUILD_ENV=production npm run build:all",
    "build:app": "if [ \"$NEXT_PUBLIC_BUILD_ENV\" = \"production\" ]; then npm run build:app:main:prod; else npm run build:app:main:dev; fi",
    "build:app:main:dev": "env-cmd -f .env.local next build && npm run build:app:post-processing",
    "build:app:main:prod": "env-cmd -f .env.production next build && npm run build:app:post-processing",
    "build:app:post-processing": "rm -rf out/assets && mv out/app/_next out/assets && find out/app out/assets -type f \\( -name \\*.html -o -name \\*.js -o -name \\*.css -o -name \\*.txt \\) -exec gsed -i 's|/_next|/assets|g' {} + && npx ts-node ./ci/swap-out-inline-scripts.ts",
    "build:manifest": "ts-node ./ci/generate-manifest.ts",
    "build:service": "webpack --config webpack.scripts.config.js --mode production",
    "build:service:min": "webpack --config webpack.scripts.config.js --mode production",
    "build:service:watch": "webpack --config webpack.scripts.config.js --mode production --watch",
    "coverage": "jest ./src --coverage --coverageDirectory='coverage' --collectCoverageFrom='./src/**/*.ts'",
    "dev": "npm run watch:all:dev",
    "docker:start": "echo noop",
    "format": "npx prettier . --write",
    "lint": "next lint",
    "package": "IS_PACKAGING=true NEXT_PUBLIC_BUILD_ENV=production npm run build:all && mkdir -p dist && zip -r dist/$(date -u +\"%Y-%m-%dT%H:%M:%SZ\").zip out",
    "test": "jest",
    "test:ci": "npm run test -- --ci",
    "watch:all:dev": "cross-env NEXT_PUBLIC_BUILD_ENV=development concurrently -c \"auto\" -n \"app,service\" \"npm-watch\" npm:build:service:watch",
    "watch:all:prod": "cross-env NEXT_PUBLIC_BUILD_ENV=production concurrently -c \"auto\" -n \"app,service\" \"npm-watch\" npm:build:service:watch"
  },
  "dependencies": {
    "@aident/eslint-config": "workspace:*",
    "@aident/prettier-config": "workspace:*",
    "@aident/shared": "workspace:*",
    "autoprefixer": "10.4.16",
    "browserify-fs": "^1.0.0",
    "buffer": "^6.0.3",
    "esprima": "^4.0.1",
    "flowbite": "^1.8.1",
    "js-interpreter": "^5.0.0",
    "mitt": "^3.0.1",
    "path-browserify": "^1.0.1",
    "process": "^0.11.10",
    "reflect-metadata": "^0.1.13",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "ts-node": "^10.9.2",
    "url-polyfill": "^1.1.12",
    "util": "^0.12.5"
  },
  "devDependencies": {
    "@swc/cli": "^0.1.62",
    "@swc/core": "^1.3.91",
    "@testing-library/react": "^14.0.0",
    "@types/esprima": "^4.0.6",
    "cross-env": "^7.0.3",
    "css-loader": "^7.1.2",
    "devtools-protocol": "^0.0.1179426",
    "env-cmd": "^10.1.0",
    "html-loader": "^4.2.0",
    "jest": "^29.7.0",
    "postcss-loader": "^8.1.1",
    "style-loader": "^4.0.0",
    "tailwindcss-animated": "^1.0.1"
  }
}
